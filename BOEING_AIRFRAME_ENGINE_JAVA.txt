=== Method Definitions ===

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper
  try {     java.lang.Object obj = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(sourceObj, "blocks");     // Block Supplier loader     if (obj != null) {         java.lang.reflect.Method intBlockMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(obj, "initBlocks");         if (intBlockMethod != null) {             intBlockMethod.setAccessible(true);             intBlockMethod.invoke(obj);         }         // Blocks mapping         org.springframework.beans.BeanUtils.copyProperties(obj, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     }     // Global Value Mapping     org.springframework.beans.BeanUtils.copyProperties(sourceObj, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     // update app instance     java.lang.reflect.Method appInstanceMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj), "updateAppInstance");     if (appInstanceMethod != null) {         appInstanceMethod.invoke(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     } } catch (java.lang.Exception e) {     log.error("bulkClassMapper --> " + e.getMessage()); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.rtrim
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.rtrim(str, replaceChar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toString
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toString(inputString)

Method: com.honeywell.coreptdu.utils.oracleutils.Block.getRow
  // Custom behavior before calling super.get if (data.size() > index) {     // Call the superclass method to get the actual element     E element = data.get(index);     return element; }
  try {     if (paramClass == null) {         if (!data.isEmpty()) {             // E _element = super.get(0);             // paramClass = () -> _element.getClass();             log.info("Block Supplier null");             return null;         } else {             return null;         }     }     // data.add(paramClass.get());     // return data.get(index);     return paramClass.get(); } catch (java.lang.Exception e) {     log.error(e.getMessage());     return null; }

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.selectInto

Method: com.honeywell.coreptdu.utils.oracleutils.Record.getInt
  try {     com.honeywell.coreptdu.utils.oracleutils.var obj = getNext(true);     if (obj == null) {         return null;     }     return java.lang.Integer.valueOf(obj.toString()); } catch (java.lang.Exception e) {     throw new java.lang.RuntimeException(e); }

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper
  try {     java.lang.Object obj = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(targetObj, "blocks");     if (obj != null) {         java.lang.reflect.Method intBlockMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(obj, "initBlocks");         if (intBlockMethod != null) {             intBlockMethod.setAccessible(true);             intBlockMethod.invoke(obj);         }         org.springframework.beans.BeanUtils.copyProperties(sourceObj, obj);     }     org.springframework.beans.BeanUtils.copyProperties(sourceObj, targetObj); } catch (java.lang.Exception e) {     log.error("ResponseMapper --> " + e.getMessage()); }

Method: com.honeywell.coreptdu.global.dto.BaseResponse.render
  if (response.getErrorCode() != null) {     com.honeywell.coreptdu.global.dto.ResponseDto<T> errorResponse = new com.honeywell.coreptdu.global.dto.ResponseDto<T>(response.getErrorCode(), response.getMessage());     return renderError(errorResponse); }
  com.honeywell.coreptdu.global.dto.ResponseDto<T> successResponse = new com.honeywell.coreptdu.global.dto.ResponseDto<T>(response.getMessage(), response.getPayload(), response.getQueryCount(), response.getLastQuery())
  return renderSuccess(successResponse)

Method: com.honeywell.coreptdu.global.dto.BaseResponse.formSuccessResponse
  return new com.honeywell.coreptdu.global.dto.ResponseDto<>(message, result, count, lastQuery)

Method: com.honeywell.coreptdu.exception.ExceptionUtils.handleException
  com.honeywell.coreptdu.global.dto.ResponseDto<T> responseDto
  if (e instanceof com.honeywell.coreptdu.exception.FormTriggerFailureException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(100, e.getMessage(), resDto);// Assuming a success message      return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.ExitFormException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.AlertException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.FileOpenException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(300, e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.UpdateFailureException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(40509, e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.RecordLockedException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else {     java.lang.Throwable cause = e.getCause();     boolean isConstraintViolation = (((cause instanceof org.hibernate.exception.ConstraintViolationException) || (cause instanceof org.springframework.dao.DataIntegrityViolationException)) || (cause instanceof org.hibernate.NonUniqueObjectException)) || (cause instanceof jakarta.persistence.EntityExistsException);     if (isConstraintViolation) {         java.util.List<com.honeywell.coreptdu.global.forms.Event> event = new java.util.ArrayList<>();         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "ALERT_MESSAGE_TEXT", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(40508, e.getMessage(), resDto);         return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto);     }     throw e; }

Method: com.honeywell.coreptdu.global.forms.AlertDetail.getCurrent
  currentAlert += 1
  return currentAlert

Method: com.honeywell.coreptdu.pkg.spec.IDisplayAlert.moreButtons

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.chr
  if (chrInt == 10) {     return "\n"; }
  return null

Method: com.honeywell.coreptdu.global.forms.AlertDetail.createNewRecord
  totalAlert = currentAlert
  currentAlert = 0
  com.honeywell.coreptdu.global.forms.InnerAlertDetail in = new com.honeywell.coreptdu.global.forms.InnerAlertDetail()
  in.setAlertName(alertName)
  alerts.add(in)

Method: com.honeywell.coreptdu.global.forms.AlertDetail.getAlertValue
  if (alerts.get(index - 1).getAlertName().equals(alertName)) {     return alerts.get(index - 1).getValue(); }
  return 0

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.boeingAirframeEngineOnCheckDeleteMaster
  log.info(" boeingAirframeEngineOnCheckDeleteMaster Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.String boeingApfAirframeEngineCur = """     SELECT 1 FROM BOEING_APF_AIRFRAME_ENGINE B         WHERE B.AIRFRAME = ? and B.ENGINE_IDENT = ?     """;     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> records = app.executeQuery(boeingApfAirframeEngineCur, boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getAirframe(), boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getEngineIdent());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineOnCheckDeleteMaster executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineOnCheckDeleteMaster Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.commitForm
  try {     int value = alertDetails.checkRecordLockAlertValue();     if ((value == 0) || (value == 1)) {         genericNativeQueryHelper.commitEntities(obj);     } else if (value == 2) {         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     } } catch (java.lang.Exception e) {     if (e instanceof com.honeywell.coreptdu.exception.RecordLockedException) {         alertDetails.getCurrent();         moreButtons("S", "Forms", "Could not reserve the record. Keep trying?", "Yes", "No", null);         alertDetails.createOrRecreateRecord("RecordLock");         throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);     } else if (e instanceof com.honeywell.coreptdu.exception.NoDataFoundException) {         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "caution", "Error", "FRM-40504: Record has been updated or deleted by another user.\nRe-query to see change.", "ALERT_MESSAGE_TEXT", "OK", "", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.sendUpdatedRowIdDetails
  genericNativeQueryHelper.sendUpdatedRowIdDetails(system.getFormName(), system.getUserSessionId(), rowid)

Method: com.honeywell.coreptdu.pll.CoreptLib.dspMsg
  // PropertyHelpers.setAlertProperty(event, "dsp_msg", "ALERT_MESSAGE_TEXT", // msg); com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "note", "Forms", msg, "ALERT_MESSAGE_TEXT", "&O.K.", null, null)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false)

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.executeQuery

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.queryMasterDetails
  log.info("queryMasterDetails Executing")
  try {     java.lang.String oldmsg = null;     java.lang.String reldef = "FALSE";     java.lang.String where = null;     try {         oldmsg = system.getMessageLevel();         if (java.util.Objects.equals(reldef, "FALSE")) {             system.setMessageLevel("10");             where = ((("BOEING_APF_AIRFRAME_ENGINE.AIRFRAME = '" + boeingAirframeEngine.getData().get(system.getCursorRecordIndex()).getAirframe()) + "' AND BOEING_APF_AIRFRAME_ENGINE.ENGINE_IDENT = '") + boeingAirframeEngine.getData().get(system.getCursorRecordIndex()).getEngineIdent()) + "'";             boeingApfAirframeEngine.getData().clear();             executeQuery(this, "boeingApfAirframeEngine", where, null, null);             system.setMessageLevel(oldmsg);         } else {             setBlockProperty(detail, "COORDINATION_STATUS", "NON_COORDINATED");         }     } catch (java.lang.Exception e) {         system.setMessageLevel(oldmsg);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     log.info("queryMasterDetails Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing queryMasterDetails" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.goItem
  itemName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(itemName)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.goItem(event, itemName)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toInteger
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toInteger(string1)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.deleteRecord
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.deleteRecord(event, blockname)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.goBlock
  blockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(blockName)
  itemName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(itemName)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.goBlock(event, blockName, itemName)
  // Updated by tools team
  // system.setCurrentBlock(blockName);
  // system.setCursorBlock(blockName);

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.checkPackageFailure
  log.info("checkPackageFailure Executing")
  try {     log.info("checkPackageFailure Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing checkPackageFailure" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.unsetQueryMenuItems
  java.lang.String vForm = system.getCurrentForm()
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Cancel"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("LastCriteria"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("CountHits"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Action") + ".") + ltrim("Exit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Block") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Field") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Field") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("Help"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("Keys"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("DisplayError"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Execute"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Enter"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("FetchNextSet"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("ScrollUp"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("ScrollDown"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Tools") + ".") + ltrim("AddQueryConditions"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  if ("VIEW".equals(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(this, "parameter.workType"))) {     setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Action") + ".") + ltrim("Save"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Cut"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Copy"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Paste"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Edit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("List"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     if (java.util.Arrays.asList("NAVDB_SETUP").contains(vForm)) {         setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     } } else {     setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Action") + ".") + ltrim("Save"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Cut"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Copy"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Paste"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Edit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("List"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     if ("MVP".equals(vForm)) {         setMenuItemProperty((rtrim("Block") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Block") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Lock"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if ("KLNX_NAME_FIELD_ABBREV".equals(vForm)) {         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if (java.util.Arrays.asList("CUST_DCR", "NAVDB_SETUP").contains(vForm)) {         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if (java.util.regex.Pattern.compile(".*APF").matcher(vForm).matches() || java.util.Arrays.asList("NAVDB_SETUP", "FMS_CONFIG", "FMS_LOOKUP", "SUPPORT_DATA", "TOB_STATUS", "GENERATED_NAVDB", "CUST_DCR", "SHOW_VANDV_ERRORS", com.honeywell.coreptdu.global.forms.DbConstants.AIRBUS_AIRFRAME_ENGINE, "BOEING_AIRFRAME_ENGINE", "WEIGHT_VARIANT", "AUTO_THRUST_CUTBACK", "FUEL_POLICY", "GPS_ALMANAC", "FLIGHT_TEST_BUS", "KLNX_NAME_FIELD_ABBREV").contains(vForm)) {         if ((!java.util.regex.Pattern.compile(".*APF").matcher(vForm).matches()) && (!java.util.Arrays.asList("WEIGHT_VARIANT", "AUTO_THRUST_CUTBACK", "FUEL_POLICY", "FLIGHT_TEST_BUS").contains(vForm))) {             setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         }         if (java.util.Arrays.asList("NAVDB_SETUP", "TOB_STATUS", "SHOW_VANDV_ERRORS").contains(vForm)) {             setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         }     } }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.lower
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.lower(str)

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty
  if ((bool == null) || bool.isEmpty()) {     return true; }
  return false

Method: com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty
  com.honeywell.coreptdu.global.forms.Event event = new com.honeywell.coreptdu.global.forms.Event()
  event.setName("setAlertProperty")
  com.honeywell.coreptdu.global.forms.SetAlertProperty alertProperty = new com.honeywell.coreptdu.global.forms.SetAlertProperty()
  alertProperty.setAlertName(alertName)
  alertProperty.setAlertType(alertType)
  alertProperty.setTitle(title)
  alertProperty.setAlertMessage(message)
  alertProperty.setProperty(property)
  alertProperty.setButton1Label(button1Label)
  alertProperty.setButton2Label(button2Label)
  alertProperty.setButton3Label(button3Label)
  alertProperty.setContentClass(contentClass)
  event.setValue(alertProperty)
  list.add(event)

Method: com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert
  com.honeywell.coreptdu.global.forms.Event event = new com.honeywell.coreptdu.global.forms.Event()
  event.setName("showAlert")
  com.honeywell.coreptdu.global.forms.ShowAlert showAlert = new com.honeywell.coreptdu.global.forms.ShowAlert()
  showAlert.setAlertName(alertName)
  showAlert.setToContinue(toContinue)
  event.setValue(showAlert)
  list.add(event)

Method: com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase
  java.lang.StringBuilder result = new java.lang.StringBuilder()
  if (!str.contains("_")) {     return str; }
  java.lang.String[] words = str.toLowerCase().split("_")
  for (java.lang.String word : words) {     if (result.length() == 0) {         result.append(word.toLowerCase());     } else {         result.append(java.lang.Character.toUpperCase(word.charAt(0)));         result.append(word.substring(1).toLowerCase());     } }
  return result.toString()

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getBlockMetaData
  if ("PROMPT_NAME".equals(fieldName)) {     return blockDetail.getItems().stream().map(com.honeywell.coreptdu.global.forms.ItemDetail::getPromptName).collect(java.util.stream.Collectors.toList()); }
  if ("DATABASE_COLUMN".equals(fieldName)) {     return blockDetail.getItems().stream().map(com.honeywell.coreptdu.global.forms.ItemDetail::getDatabaseColumn).collect(java.util.stream.Collectors.toList()); }
  return new java.util.ArrayList<java.lang.String>()

Method: com.honeywell.coreptdu.utils.common.HashUtils.decrypt
  if (encryptedPassword == null) {     return null; }
  byte[] encryptedWithIV = java.util.Base64.getDecoder().decode(new java.lang.String(encryptedPassword))
  // Arrays.fill(encryptedPassword, '\0'); byte[] iv = java.util.Arrays.copyOfRange(encryptedWithIV, 0, com.honeywell.coreptdu.utils.common.HashUtils.IV_LENGTH)
  byte[] encryptedBytes = java.util.Arrays.copyOfRange(encryptedWithIV, com.honeywell.coreptdu.utils.common.HashUtils.IV_LENGTH, encryptedWithIV.length)
  java.util.Arrays.fill(encryptedWithIV, ((byte) (0)))
  javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(com.honeywell.coreptdu.utils.common.HashUtils.ALGORITHM)
  cipher.init(javax.crypto.Cipher.DECRYPT_MODE, getKeySpec(encryptionKey), new javax.crypto.spec.GCMParameterSpec(com.honeywell.coreptdu.utils.common.HashUtils.TAG_LENGTH, iv))
  byte[] decryptedBytes = cipher.doFinal(encryptedBytes)
  java.util.Arrays.fill(encryptedBytes, ((byte) (0)))
  char[] decryptedChars = byteArrayToCharArray(decryptedBytes)
  java.util.Arrays.fill(decryptedBytes, ((byte) (0)))
  java.lang.String decryptString = new java.lang.String(decryptedChars)
  java.util.Arrays.fill(decryptedChars, '\u0000')
  java.util.Arrays.fill(decryptedBytes, ((byte) (0)))
  return decryptString

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.substrWithLen
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.substrWithLen(value, startPosition, length)

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr
  int finder = 0
  if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(value)) {     return 0; }
  for (int i = start; i < value.length(); i++) {     for (int j = 0; j < findchar.length(); j++) {         if (value.charAt(i) == findchar.charAt(j)) {             finder++;             i++;         } else {             finder = 0;         }     }     if (finder == findchar.length()) {         if (occurrence == 1) {             return (i - findchar.length()) + 1;         } else {             occurrence--;             i--;             finder = 0;         }     } }
  return 0

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.upper
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.upper(str)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getExportHeader
  java.lang.StringBuilder header = new java.lang.StringBuilder()
  com.honeywell.coreptdu.utils.oracleutils.Record rec
  try {     java.lang.String dateQuery = """          SELECT TO_CHAR(SYSDATE , 'Month DD,YYYY') as formatted_date  FROM DUAL     """;     java.lang.String timeQuery = """     SELECT  to_char(sysdate,'HH24:MI') FROM DUAL     """;     rec = app.selectInto(dateQuery);     com.honeywell.coreptdu.utils.oracleutils.Record rec1 = app.selectInto(timeQuery);     if (depth == 0) {         header.append("Generated on ").append(rec.getObject()).append(" at ").append(rec1.getObject()).append("\n").append("\n");     }     for (int i = 0; i < depth; i++) {         header.append(delimiter);     }     // Header Generator     for (java.lang.String column : headerColumns) {         header.append("\"").append(column).append("\"").append(delimiter);     } } catch (java.lang.Exception e) {     log.error("Error Throwed", e); }
  header.append("\n")
  return header.toString()

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.mapResultSetToClass

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getExportData
  java.lang.StringBuilder data = new java.lang.StringBuilder()
  for (int i = 0; i < depth; i++) {     data.append(delimiter); }
  data.append(ObjecttoString(obj, columns, delimiter, fileType))
  data.append("\n")
  return data.toString()

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.getChildExportData
  java.lang.StringBuilder data = new java.lang.StringBuilder()
  if (recs.size() <= 0) {     return ""; }
  this.boeingApfAirframeEngine.getData().clear()
  for (com.honeywell.coreptdu.utils.oracleutils.Record rec : recs) {     if ("boeingApfAirframeEngine".equals(childBlockName)) {         com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine2 = app.mapResultSetToClass(rec, com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine.class);         this.boeingApfAirframeEngine.add(boeingApfAirframeEngine2);     } }
  if ("boeingApfAirframeEngine".equals(childBlockName)) {     for (com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine2 : this.boeingApfAirframeEngine.getData()) {         data.append(getExportData(boeingApfAirframeEngine2, columns, depth, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));     } }
  return data.toString()

Method: com.honeywell.coreptdu.utils.oracleutils.Block.add
  data.add(row)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getApplicationProperty
  java.lang.String strReturn = null
  if (com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME.equals(argFormName)) {     strReturn = system.getCurrentForm(); } else if (com.honeywell.coreptdu.global.forms.FormConstant.CALLING_FORM.equals(argFormName)) {     strReturn = system.getCallingForm(); }
  return strReturn

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.defaultValue
  java.lang.String[] parts = targetValue.split("\\.")
  if (parts.length == 2) {     java.lang.String prefix = parts[0];     java.lang.String fieldName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[1]);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.defaultValue(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(baseInstance, prefix), srcValue, fieldName); }

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.getUserName

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.getPassword

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.getURL

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.nameIn
  itemName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(itemName)
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(object, itemName, system.getCursorRecordIndex(), type)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setWindowProperty
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setWindowProperty(event, windowName, property, x, y)

Method: com.honeywell.coreptdu.pll.CoreptLib.setRole
  // commenting out dead code // String query = ""; try {     try {         if (!java.util.Objects.equals(pRole, null)) {             // coverity-fixes             try (java.sql.Connection con = app.getDataSource().getConnection()) {                 java.lang.String plsql = "{ CALL DBMS_SESSION.SET_ROLE(?) }";                 try (java.sql.CallableStatement callableStatement = con.prepareCall(plsql)) {                     // Bind the role parameter                     callableStatement.setString(1, pRole);                     // Execute the PL/SQL block                     callableStatement.execute();                     callableStatement.close();                 }                 con.close();             }             // finally {             // con.close();             // }             // TODO dbms_session.set_role(p_role);             // query = "BEGIN DBMS_SESSION.SET_ROLE('" + pRole + "'); END;";             // app.executeQuery(query);         }         log.info("Data Retreived Successfully");         return "PASSED";     }// others      catch (java.lang.Exception e) {         return "Failed " + com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getSQLcode(e);     } } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.oneButton
  displayAlert.oneButton(inType, inTitle, inMessage)
  // System.out.print(BPROPERTY_FALSE);

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.exitForm
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.exitForm(event, formName, commitMode, rollbackMode)

Method: com.honeywell.coreptdu.utils.oracleutils.Record.getString
  try {     com.honeywell.coreptdu.utils.oracleutils.var obj = getNext(true);     if (obj == null) {         return null;     }     return java.lang.String.valueOf(obj); } catch (java.lang.Exception e) {     throw new java.lang.RuntimeException(e); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setItemProperty
  com.honeywell.coreptdu.global.dto.BlockItemModel bim = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.getBlockItem(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(argBlockItemToken))
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setItemProperty(event, bim.getBlockName(), bim.getItemName(), argProperty, argPropertyValue)

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.populateItems
  log.info("populateItems Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String scrDescription = null;     java.lang.String scrPartNumber = null;     java.util.List<java.lang.String> getModuleInformation = coreptLib.getModuleInformation(mname.replaceAll(" ", "_"), scrDescription, scrPartNumber);     scrDescription = getModuleInformation.get(0);     scrPartNumber = getModuleInformation.get(1);     if (java.util.Objects.equals(nameIn(this, "parameter.work_type"), "VIEW")) {         displayItemBlock.setFormDesc(substr(scrDescription, 1, instr(scrDescription, "/") - 1) + substr(scrDescription, instr(scrDescription, "/") + 7));     } else {         displayItemBlock.setFormDesc(scrDescription);     }     displayItemBlock.setFormDateTime(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm:ss")).toUpperCase());     displayItemBlock.setFormName(mname);     displayItemBlock.setFormPartNumber(scrPartNumber);     try {         query = """         SELECT data_supplier_name         		from   data_supplier         		WHERE  data_supplier = nvl(?,'T')         """;         rec = app.selectInto(query, global.getDataSupplier());         displayItemBlock.setFormSource(rec.getString());     } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {         displayItemBlock.setFormSource(global.getDataSupplier());
		 displayItemBlock.setFormSource(global.getProcessingCycle());// Added for Code Review Testing     }     query = """     SELECT DECODE(nvl(?,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||?||', '||     				  DECODE(nvl(?,'VIEW'),'VIEW','Query Only','Data Entry')        from   dual     """;     rec = app.selectInto(query, parameter.getRecordType(), parameter.getLibraryAccess(), parameter.getWorkType());     displayItemBlock.setFormRecordType(rec.getString());     log.info("populateItems Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateItems" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.checkApfDuplicate
  for (int i = 1; i < boeingApfAirframeEngine.getData().size(); i++) {     for (int j = i + 1; j < boeingApfAirframeEngine.getData().size(); j++) {         if (java.util.Objects.equals(boeingApfAirframeEngine.getRow(i).getNavdbId(), boeingApfAirframeEngine.getRow(j).getNavdbId()) && java.util.Objects.equals(boeingApfAirframeEngine.getRow(i).getApfId(), boeingApfAirframeEngine.getRow(j).getApfId())) {             coreptLib.dspMsg("ORACLE error:  unable to INSERT record. \n \n Place check the exact error message form the \"Display \n Error\" in the \"HELP\" menu ");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     } }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.createRecord
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.createRecord(event, blockName)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.copy
  java.lang.String[] parts = targetValue.split("\\.")
  if (parts.length == 2) {     java.lang.String prefix = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[0]);     java.lang.String fieldName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[1]);     // Object prObject = OracleHelpers.nameIn(baseInstance, prefix);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.copyWithIndex(baseInstance, srcValue, (prefix + ".") + fieldName, system.getCursorRecordIndex()); }

Method: com.honeywell.coreptdu.pll.CoreptLib.coreptenterquery
  try {     // TODO set_query_menu_items;     setquerymenuitems(system.getCursorBlock());     enterQuery();     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.clearAllMasterDetails
  log.info("clearAllMasterDetails Executing")
  try {     java.lang.String mastblk = null;     java.lang.String coordop = null;     java.lang.String trigblk = null;     java.lang.String startitm = null;     java.lang.String frmstat = null;     java.lang.String curblk = null;     java.lang.String currel = null;     // String curdtl = null;     /**      * FUNCTION First_Changed_Block_Below(Master VARCHAR2) RETURN VARCHAR2 IS curblk      * VARCHAR2(30); -- Current Block currel VARCHAR2(30); -- Current Relation      * retblk VARCHAR2(30); -- Return Block BEGIN -- -- Initialize Local Vars --      * curblk := Master; currel := Get_Block_Property(curblk,      * FIRST_MASTER_RELATION); -- -- While there exists another relation for this      * block -- WHILE currel IS NOT NULL LOOP -- -- Get the name of the detail block      * -- curblk := Get_Relation_Property(currel, DETAIL_NAME); -- -- If this block      * has changes, return its name -- IF ( Get_Block_Property(curblk, STATUS) =      * 'CHANGED' ) THEN RETURN curblk; ELSE -- -- No changes, recursively look for      * changed blocks below -- retblk := First_Changed_Block_Below(curblk); -- -- If      * some block below is changed, return its name -- IF retblk IS NOT NULL THEN      * RETURN retblk; ELSE -- -- Consider the next relation -- currel :=      * Get_Relation_Property(currel, NEXT_MASTER_RELATION); END IF; END IF; END      * LOOP;      *      * -- -- No changed blocks were found -- RETURN NULL; END      * First_Changed_Block_Below;      */     try {         mastblk = system.getMasterBlock();         coordop = system.getCoordinationOperation();         trigblk = system.getTriggerBlock();         startitm = system.getCursorItem();         frmstat = system.getFormStatus();         if (!java.util.Arrays.asList("CLEAR_RECORD", "SYNCHRONIZE_BLOCKS").contains(coordop)) {             if (java.util.Objects.equals(mastblk, trigblk)) {                 if (java.util.Objects.equals(frmstat, "CHANGED")) {                     if (!java.util.Objects.equals(curblk, null)) {                         goBlock(curblk, "");                         checkPackageFailure();                         if (!(java.util.Objects.equals(system.getFormStatus(), "QUERY") || java.util.Objects.equals(system.getBlockStatus(), "NEW"))) {                             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                         }                     }                 }             }         }         if (!java.util.Objects.equals(system.getCursorItem(), startitm)) {             goItem(startitm);             checkPackageFailure();         }     }// Form_Trigger_Failure      catch (com.honeywell.coreptdu.exception.FormTriggerFailureException e) {         if (!java.util.Objects.equals(system.getCursorItem(), startitm)) {             goItem(startitm);         }     }     log.info("clearAllMasterDetails Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing clearAllMasterDetails" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.getModuleInformation
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     try {         // commenting out dead code         // String getC1 = "";         query = """         select *         from COREPT_MODULES         WHERE module_name = ?         """;         rec = app.selectInto(query, mname);         scrDesc = toString(rec.getObject("module_description"));     }// others      catch (java.lang.Exception e) {         scrDesc = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getSQLerrm(e);     }     try {         query = """         SELECT PART_NUMBER         FROM CPTCONTROL.SYSTEM_SOFTWARE_IDENTIFICATION         """;         rec = app.selectInto(query);         scrPn = "P/N: " + ltrim(rtrim(rec.getString()));     } catch (java.lang.Exception e) {         scrPn = "P/N: " + com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getSQLerrm(e);     }     log.info("getmoduleinformation executed Successfully");     return java.util.Arrays.asList(scrDesc, scrPn); } catch (java.lang.Exception e) {     log.error("Error while executing getmoduleinformation - " + e.getMessage());     return java.util.Arrays.asList(scrDesc, scrPn); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.substr
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.substr(input, startIndex, len)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.instr
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.instr(value, findchar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.executeQuery
  try {     if ((ds != null) && (ds.length > 0)) {         return genericNativeQueryHelper.executeQuery(_class, fieldName, whereClause, joinClause, orderBy, ds);     } else {         return genericNativeQueryHelper.executeQuery(_class, fieldName, whereClause, joinClause, orderBy);     } } catch (java.lang.Exception ex) {     throw ex; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setBlockProperty
  if (argBlockProperty.equals("defaultWhere") || argBlockProperty.equals("default_where")) {     try {         copy(hashUtils.encrypt(argPropertyValue), argBlockName + ".defaultWhere");         // defaultWhere(argBlockName,argPropertyValue);     } catch (java.lang.NoSuchFieldException | java.lang.IllegalAccessException e) {         log.error(e.getMessage());     } }
  if (argBlockName.contains("_")) {     argBlockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(argBlockName); }
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setBlockProperty(event, argBlockName, argBlockProperty, argPropertyValue, null, 0, 0)

Method: com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.toolsExportFormData
  java.lang.String curBlk = system.getCursorBlock()
  java.lang.String blockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock())
  com.honeywell.coreptdu.global.forms.window wnid = findWindow(system.getCurrentForm(), "baseWindow")
  // -- Check if there is data // --		last_record; // --		v_records := get_block_property(name_in('system.current_block'),QUERY_HITS); // --		first_record; //command in fmb code also try {     if (java.util.Objects.equals(system.getMode(), "NORMAL")) {         if (!java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {             if (((like("%_LEG", curBlk) || like("%_SEGMENT", curBlk)) || like("%_VIA", curBlk)) && (!com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.Searchairwayleg.isContains(curBlk))) {                 com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "stop_alert", "stop", "Error", "Data should be exported from master level.", "ALERT_MESSAGE_TEXT", "OK", "", "");                 com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "stop_alert", false);                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             } else if ((java.util.Objects.equals(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(curBlk) + ".recordStatus")), "NEW") && (!java.util.Objects.equals(lower(curBlk), "message"))) || ((com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(toString(nameIn(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(curBlk)), "lastQuery"))) && (!java.util.Objects.equals(lower(curBlk), "message"))) && (!java.util.Objects.equals(lower(curBlk), "comparerecordcountblk")))) {                 // && upper(system.getRecordStatus()).equals("DELETED")) {                 coreptLib.dspMsg("There is no data to be exported. Run first a query or\ncreate record(s).");                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);             } else {                 global.setStatusWindow(getWindowProperty(wnid, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE));                 coreptLib.savedata(toString(nameIn(this, system.getCurrentForm())), toString(nameIn(this, system.getCurrentBlock())), null);             }         } else {             coreptLib.dspMsg("There is change in the data. Please save the\nmodification first.");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);         }         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.callForm(event, "exportdestination");     } else {         coreptLib.dspMsg("The module is in query mode.  Run first the query.");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);     }     if (nameIn(nameIn(frm, blockName), "lastQuery") == null) {         global.setLastQuery(toString(nameIn(frm, blockName + ".lastQuery")));     } else {         global.setLastQuery(toString(nameIn(nameIn(frm, blockName), "lastQuery")));     }     // PropertyHelpers.goBlock(event, "selectOptions", "");     com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.callForm(event, "exportdestination"); } catch (com.honeywell.coreptdu.exception.FormTriggerFailureException ex) {     throw ex; } catch (java.lang.Exception e) { }

Method: com.honeywell.coreptdu.pll.CoreptLib.initialization
  super.app = this.app
  super.global = this.global
  super.system = this.system
  super.baseInstance = this
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  this.instance = Instance
  super.event = this.event
  super.groups = this.groups
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, refreshMasterLibrary)
  refreshMasterLibrary.initialization(Instance)

Method: com.honeywell.coreptdu.datatypes.sctemplate.serviceimpl.ScTemplateTriggerServiceImpl.initialization
  super.groups = this.groups
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.system = this.system
  super.global = this.global
  super.windows = this.windows
  super.parameter = this.parameter
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  coreptLib.initialization(childInstance)
  super.baseInstance = this
  this.instance = childInstance

Method: com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.initialization
  super.groups = this.groups
  super.app = this.app
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.system = this.system
  super.global = this.global
  super.windows = this.windows
  super.parameter = this.parameter
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  coreptLib.initialization(childInstance)
  corepttemplatetriggerserviceimpl.initialization(childInstance)
  super.baseInstance = this
  this.instance = childInstance

Method: com.honeywell.coreptdu.datatypes.boeingairframeengine.serviceimpl.BoeingAirframeEngineTriggerServiceImpl.initializeForm
  log.info("initializeForm Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String fname = getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME);     java.lang.String vErr = null;     defaultValue("J", "global.data_supplier");     defaultValue("99999", "global.dcr_number");     defaultValue(null, "global.processing_cycle");     defaultValue("MAXIMIZE", "global.status_window");     defaultValue(null, "global.allroles");     defaultValue("cpt", "global.user_name");     defaultValue("cpt", "global.password");     defaultValue("cpt", "global.connect_string");     defaultValue("airport", "global.data_type");     defaultValue("airport", "global.table_name");     defaultValue("blank", "global.last_query");     global.setUserName(app.getUserName());     global.setPassword(app.getPassword());     global.setConnectString(app.getURL());     if (java.util.Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE);     } else {         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);     }     vErr = coreptLib.setRole(global.getAllroles());     if (!java.util.Objects.equals(vErr, "PASSED")) {         oneButton("S", "Fatal Error", "The roles cannot be activated.  Contact the COREPT Administrator.");         exitForm();     } else {         if (java.util.Objects.equals(global.getProcessingCycle(), null)) {             try {                 query = """                 select max(processing_cycle)                       from pl_std_airport                 """;                 rec = app.selectInto(query);                 global.setProcessingCycle(rec.getString());             } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {                 global.setProcessingCycle(null);             }
			 else if (java.util.Objects.Notequals(global.getProcessingCycle(), null)) {
			 //Added for CodeReview Testing
             try {
                 query = """                 select max(processing_cycle)                       from pl_std_airport                 """;
                 rec = app.selectInto(query);
                 global.setProcessingCycle(rec.getString());
             } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {
                 global.setProcessingCycle(null);
             }         }         global.setUserName(app.getUserName());         global.setPassword(app.getPassword());         global.setConnectString(app.getURL());         setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "60");         displayItemBlock.setProcessingCycle(global.getProcessingCycle());         populateItems(fname);         coreptLib.unsetQueryMenuItems();     }     log.info("initializeForm Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing initializeForm" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.setBlock
  java.lang.String vFirstBlock = null
  java.lang.String vLastBlock = null
  java.lang.String vBlock = null
  java.lang.String vLib = null
  java.lang.String vTable = null
  java.lang.String vRectype = null
  java.lang.String vGoBlock = null
  // String formName = system.getCurrentForm(); // List<OrderDto> blocks = getFormBlocks(system.getCurrentForm()); java.util.List<java.lang.String> blocks = ((java.util.List<java.lang.String>) (nameIn(baseInstance, "blocksOrder")))
  copy(null, "global.new_dcr_no")
  vFirstBlock = getFormProperty(getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME), "FIRST_BLOCK")
  vBlock = vFirstBlock
  vLastBlock = getFormProperty(getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME), "LAST_BLOCK")
  for (java.lang.String block : blocks) {     vBlock = block;     vTable = upper(toChar(nameIn(instance, (vBlock + ".") + "query_Data_Source_Name")));     if (vTable != null) {         vLib = substr(vTable, 1, 2);         if ("PL".equals(vLib)) {             vRectype = substr(vTable, 4, 1);         } else {             vRectype = substr(vTable, 1, 1);         }         if ((("PL".equals(vLib) && "PRE-LIBRARY".equals(nameIn(instance, "parameter.library_access"))) || ((!"PL".equals(vLib)) && "MASTER".equals(nameIn(instance, "parameter.library_access")))) && (vRectype.equals(nameIn(instance, "parameter.record_type")) || "A".equals(nameIn(instance, "parameter.record_type")))) {             if (vGoBlock == null) {                 vGoBlock = vBlock;             }         }         if ("VIEW".equals(nameIn(instance, "parameter.work_type"))) {             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.INSERT_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.DELETE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);         }     }     if (vBlock.equals(vLastBlock)) {         break;     } else {         vBlock = block;     } }
  if ("PRE-LIBRARY".equals(nameIn(instance, "parameter.library_access"))) {     setItemProperty("display_item_block.allow_both_cycles", com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);     setItemProperty("display_item_block.allow_both_cycles", com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);     copy(instance, "N", "display_item_block.allow_both_cycles"); }
  if (vGoBlock == null) {     vGoBlock = vFirstBlock; }
  // log.info(vGoBlock); goBlock(vGoBlock, "")
  // below line added for call forms from another forms. setcurrentAndCursorBlock(vGoBlock)


=== API Methods ===

API: boeingAirframeEngineCreateDcrNumberWhenValidateItem(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingAirframeEngineCreateDcrNumberWhenValidateItem Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(rtrim(toString(boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getCreateDcrNumber())), null)) {         java.lang.String query = "select dcr_number_seq.nextval from dual";         com.honeywell.coreptdu.utils.oracleutils.Record rec = app.selectInto(query);         boeingAirframeEngine.getRow(system.getCursorRecordIndex()).setCreateDcrNumber(rec.getInt());     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineCreateDcrNumberWhenValidateItem executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineCreateDcrNumberWhenValidateItem Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingAirframeEngineKeyDelrec(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingAirframeEngineKeyDelrec Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     int vButton = 0;     if (java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         log.info("inside if");     } else {         try {             if (!java.util.Objects.equals(boeingApfAirframeEngine.getRow(0).getNavdbId(), null)) {                 alertDetails.getCurrent();                 if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                     // manually chande to C alert                     vButton = displayAlert.moreButtons("C", "Delete Record", ("Please be sure you want to delete the current record and \nits associated detail record." + chr(10)) + " ", "Delete All", "Cancel", "");                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                     alertDetails.createNewRecord("commit");                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                 } else if (alertDetails.getAlerts().size() > alertDetails.getCurrentAlert()) {
                     // Added for Code Review Testing
                     vButton = displayAlert.moreButtons("C", "Delete Record", ("Please be sure you want to delete the current record and \nits associated detail record." + chr(10)) + " ", "Delete All", "Cancel", "");
                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);
                     alertDetails.createNewRecord("commit");
                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);
                 } 
				 else {                     vButton = alertDetails.getAlertValue("commit", alertDetails.getCurrentAlert());                 }                 if (vButton == 1) {                     if (java.util.Objects.equals(boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getRecordStatus(), "INSERT")) {                         boeingApfAirframeEngine.getData().clear();                     } else {                         for (com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine1 : boeingApfAirframeEngine.getData()) {                             boeingApfAirframeEngine1.setRecordStatus("DELETED");                         }                         boeingAirframeEngineOnCheckDeleteMaster(reqDto);// need to check                          commitForm(this);// delets the clild records 1st                          boeingAirframeEngine.getRow(system.getCursorRecordIndex()).setRecordStatus("DELETED");                         commitForm(this);                     }                     sendUpdatedRowIdDetails();                     coreptLib.dspMsg("Record has been saved successfully");                     coreptLib.dspMsg("Action has been commited.");                     system.setFormStatus("NORMAL");                 } else {                     throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                 }             } else if (!java.util.Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {                 alertDetails.getCurrent();                 if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                     // manually changed to C                     vButton = displayAlert.moreButtons("C", "Delete Record", ("You are going to delete this record. Please be sure." + chr(10)) + " ", "Delete It", "Cancel", "");                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                     alertDetails.createNewRecord("commit");                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                 } else {                     vButton = alertDetails.getAlertValue("commit", alertDetails.getCurrentAlert());                 }                 if (vButton == 1) {                     boeingAirframeEngine.getRow(system.getCursorRecordIndex()).setRecordStatus("DELETED");                     commitForm(this);                     sendUpdatedRowIdDetails();                     coreptLib.dspMsg("Record has been saved successfully");                     system.setFormStatus("NORMAL");                 } else {                     throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                 }             }         } catch (org.hibernate.exception.ConstraintViolationException ex) {             coreptLib.dspMsg("ORACLE error:  unable to INSERT record. \n \nPlace check the exact error message form the \"Display \n Error\" in the \"HELP\" menu ");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineKeyDelrec executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineKeyDelrec Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingAirframeEngineOnCheckDeleteMaster(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingAirframeEngineOnCheckDeleteMaster Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.String boeingApfAirframeEngineCur = """     SELECT 1 FROM BOEING_APF_AIRFRAME_ENGINE B         WHERE B.AIRFRAME = ? and B.ENGINE_IDENT = ?     """;     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> records = app.executeQuery(boeingApfAirframeEngineCur, boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getAirframe(), boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getEngineIdent());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineOnCheckDeleteMaster executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineOnCheckDeleteMaster Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingAirframeEngineOnPopulateDetails(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingAirframeEngineOnPopulateDetails Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.String recstat = system.getRecordStatus();     java.lang.String startitm = system.getCursorItem();     java.lang.Object relId = null;     if (!(java.util.Objects.equals(recstat, "NEW") || java.util.Objects.equals(recstat, "INSERT"))) {         if ((!java.util.Objects.equals(boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getAirframe(), null)) || (!java.util.Objects.equals(boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getEngineIdent(), null))) {             queryMasterDetails(relId, "boingApfAirframeEngine");         } else if (!java.util.Objects.equals(boeingAirframeEngine.getRow(system.getCursorRecordIndex()).getAirframe(), boeingApfAirframeEngine.getRow(0).getAirframe())) {             boeingApfAirframeEngine.getData().clear();             com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine apfEngine = new com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine();             boeingApfAirframeEngine.getData().add(apfEngine);         }         if (!java.util.Objects.equals(system.getCursorItem(), startitm)) {             goItem(startitm);         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineOnPopulateDetails executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineOnPopulateDetails Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingAirframeEngineWhenValidateRecord(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingAirframeEngineWhenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     boeingAirframeEngine.getRow(system.getCursorRecordIndex()).setUpdateDcrNumber(toInteger(global.getDcrNumber()));     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingAirframeEngineWhenValidateRecord executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingAirframeEngineWhenValidateRecord Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingApfAirframeEngineCreateDcrNumberWhenValidateItem(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingApfAirframeEngineCreateDcrNumberWhenValidateItem Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(boeingApfAirframeEngine.getRow(system.getCursorRecordIndex()).getCreateDcrNumber(), null)) {         java.lang.String query = "select dcr_number_seq.nextval from dual";         com.honeywell.coreptdu.utils.oracleutils.Record rec = app.selectInto(query);         boeingApfAirframeEngine.getRow(system.getCursorRecordIndex()).setCreateDcrNumber(rec.getInt());     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingApfAirframeEngineCreateDcrNumberWhenValidateItem executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingApfAirframeEngineCreateDcrNumberWhenValidateItem Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingApfAirframeEngineKeyDelrec(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingApfAirframeEngineKeyDelrec Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     int vButton = 0;     if (java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         log.info("inside if");     } else if (!java.util.Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {         alertDetails.getCurrent();         if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {             // manually changed to C alert             vButton = displayAlert.moreButtons("C", "Delete Record", ("You are going to delete this record. Please be sure." + chr(10)) + " ", "Delete It", "Cancel", "");             com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);             alertDetails.createNewRecord("commit");             throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);         } else {             vButton = alertDetails.getAlertValue("commit", alertDetails.getCurrentAlert());         }         if (java.util.Objects.equals(vButton, 1)) {             deleteRecord("");             boeingApfAirframeEngine.getRow(system.getCursorRecordIndex()).setRecordStatus("DELETED");             try {                 commitForm(this);             } catch (org.hibernate.exception.ConstraintViolationException ex) {                 coreptLib.dspMsg("ORACLE error:  unable to INSERT record. \n \n Place check the exact error message form the \"Display \n Error\" in the \"HELP\" menu ");                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             }             sendUpdatedRowIdDetails();             coreptLib.dspMsg("Record has been saved successfully");             system.setFormStatus("NORMAL");         } else {             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingApfAirframeEngineKeyDelrec executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingApfAirframeEngineKeyDelrec Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: boeingApfAirframeEngineWhenValidateRecord(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" boeingApfAirframeEngineWhenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     boeingApfAirframeEngine.getRow(system.getCursorRecordIndex()).setUpdateDcrNumber(toInteger(global.getDcrNumber()));     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" boeingApfAirframeEngineWhenValidateRecord executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the boeingApfAirframeEngineWhenValidateRecord Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: checkApfDuplicate()
  for (int i = 1; i < boeingApfAirframeEngine.getData().size(); i++) {     for (int j = i + 1; j < boeingApfAirframeEngine.getData().size(); j++) {         if (java.util.Objects.equals(boeingApfAirframeEngine.getRow(i).getNavdbId(), boeingApfAirframeEngine.getRow(j).getNavdbId()) && java.util.Objects.equals(boeingApfAirframeEngine.getRow(i).getApfId(), boeingApfAirframeEngine.getRow(j).getApfId())) {             coreptLib.dspMsg("ORACLE error:  unable to INSERT record. \n \n Place check the exact error message form the \"Display \n Error\" in the \"HELP\" menu ");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     } }

API: checkPackageFailure()
  log.info("checkPackageFailure Executing")
  try {     log.info("checkPackageFailure Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing checkPackageFailure" + e.getMessage());     throw e; }

API: clearAllMasterDetails()
  log.info("clearAllMasterDetails Executing")
  try {     java.lang.String mastblk = null;     java.lang.String coordop = null;     java.lang.String trigblk = null;     java.lang.String startitm = null;     java.lang.String frmstat = null;     java.lang.String curblk = null;     java.lang.String currel = null;     // String curdtl = null;     /**      * FUNCTION First_Changed_Block_Below(Master VARCHAR2) RETURN VARCHAR2 IS curblk      * VARCHAR2(30); -- Current Block currel VARCHAR2(30); -- Current Relation      * retblk VARCHAR2(30); -- Return Block BEGIN -- -- Initialize Local Vars --      * curblk := Master; currel := Get_Block_Property(curblk,      * FIRST_MASTER_RELATION); -- -- While there exists another relation for this      * block -- WHILE currel IS NOT NULL LOOP -- -- Get the name of the detail block      * -- curblk := Get_Relation_Property(currel, DETAIL_NAME); -- -- If this block      * has changes, return its name -- IF ( Get_Block_Property(curblk, STATUS) =      * 'CHANGED' ) THEN RETURN curblk; ELSE -- -- No changes, recursively look for      * changed blocks below -- retblk := First_Changed_Block_Below(curblk); -- -- If      * some block below is changed, return its name -- IF retblk IS NOT NULL THEN      * RETURN retblk; ELSE -- -- Consider the next relation -- currel :=      * Get_Relation_Property(currel, NEXT_MASTER_RELATION); END IF; END IF; END      * LOOP;      *      * -- -- No changed blocks were found -- RETURN NULL; END      * First_Changed_Block_Below;      */     try {         mastblk = system.getMasterBlock();         coordop = system.getCoordinationOperation();         trigblk = system.getTriggerBlock();         startitm = system.getCursorItem();         frmstat = system.getFormStatus();         if (!java.util.Arrays.asList("CLEAR_RECORD", "SYNCHRONIZE_BLOCKS").contains(coordop)) {             if (java.util.Objects.equals(mastblk, trigblk)) {                 if (java.util.Objects.equals(frmstat, "CHANGED")) {                     if (!java.util.Objects.equals(curblk, null)) {                         goBlock(curblk, "");                         checkPackageFailure();                         if (!(java.util.Objects.equals(system.getFormStatus(), "QUERY") || java.util.Objects.equals(system.getBlockStatus(), "NEW"))) {                             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                         }                     }                 }             }         }         if (!java.util.Objects.equals(system.getCursorItem(), startitm)) {             goItem(startitm);             checkPackageFailure();         }     }// Form_Trigger_Failure      catch (com.honeywell.coreptdu.exception.FormTriggerFailureException e) {         if (!java.util.Objects.equals(system.getCursorItem(), startitm)) {             goItem(startitm);         }     }     log.info("clearAllMasterDetails Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing clearAllMasterDetails" + e.getMessage());     throw e; }

API: displayItemBlockFormPartNumberWhenNewItemInstance(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" displayItemBlockFormPartNumberWhenNewItemInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" displayItemBlockFormPartNumberWhenNewItemInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockFormPartNumberWhenNewItemInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: enableMenuItems(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" enableMenuItems Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     coreptLib.unsetQueryMenuItems();     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" enableMenuItems executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the enableMenuItems Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: exportDestination(com.honeywell.coreptdu.datatypes.exportdestination.dto.request.ExportDestinationTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.global.forms.BlockDetail mstBlockData = null;     com.honeywell.coreptdu.global.forms.BlockDetail childBlockData = null;     // String Builders     java.lang.StringBuilder reportfile = new java.lang.StringBuilder();     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> recs = null;     // Master Block     if (lower(system.getCursorBlock()).equals("message") && com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {         coreptLib.dspMsg("Sorry, please give an existing path and a file name with\nextension \'\'.txt\'\'.");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "stop", "Forms", "WUT-130: Client file name cannot be null", "ALERT_MESSAGE_TEXT", "OK", null, null);         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("boeingAirframeEngine")) {         mstBlockData = reqDto.getExportDataBlocks().get("boeingAirframeEngine");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (upper(query).contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " offset "));         }         // Child Block         childBlockData = reqDto.getExportDataBlocks().get("boeingApfAirframeEngine");         java.util.List<java.lang.String> childPromptNames = getBlockMetaData(childBlockData, "PROMPT_NAME");         java.util.List<java.lang.String> childDatabseColumns = getBlockMetaData(childBlockData, "DATABASE_COLUMN");         // Header Building..         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         reportfile.append(getExportHeader(childPromptNames, 1, selectOptions.getDelimiter())).append("\n");         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingAirframeEngine boeingAirframeEngine2 = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingAirframeEngine.class);             reportfile.append(getExportData(boeingAirframeEngine2, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));             java.lang.String where = (((" BOEING_APF_AIRFRAME_ENGINE.AIRFRAME = '" + boeingAirframeEngine2.getAirframe()) + "' AND BOEING_APF_AIRFRAME_ENGINE.ENGINE_IDENT = '") + boeingAirframeEngine2.getEngineIdent()) + "'";             java.lang.String childQuery = " Select * From CPTSC.BOEING_APF_AIRFRAME_ENGINE where " + where;             java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> childRecs = app.executeQuery(childQuery);             reportfile.append(getChildExportData(childRecs, childDatabseColumns, 1, "boeingApfAirframeEngine"));         }     } else if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("boeingApfAirframeEngine")) {         mstBlockData = reqDto.getExportDataBlocks().get("boeingApfAirframeEngine");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, "PROMPT_NAME");         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, "DATABASE_COLUMN");         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (upper(query).contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " offset "));         }         // Header Building..         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine2 = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine.class);             reportfile.append(getExportData(boeingApfAirframeEngine2, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     java.lang.String base64 = java.util.Base64.getEncoder().encodeToString(reportfile.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8));     com.honeywell.coreptdu.global.dto.ReportDetail reportDetail = new com.honeywell.coreptdu.global.dto.ReportDetail();     reportDetail.setData(base64);     resDto.setReport(reportDetail);     log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.RuntimeException e) {     log.info("RuntimeException captured");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); } catch (java.lang.Exception e) {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: getChildExportData(java.util.List,java.util.List,int,java.lang.String)
  java.lang.StringBuilder data = new java.lang.StringBuilder()
  if (recs.size() <= 0) {     return ""; }
  this.boeingApfAirframeEngine.getData().clear()
  for (com.honeywell.coreptdu.utils.oracleutils.Record rec : recs) {     if ("boeingApfAirframeEngine".equals(childBlockName)) {         com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine2 = app.mapResultSetToClass(rec, com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine.class);         this.boeingApfAirframeEngine.add(boeingApfAirframeEngine2);     } }
  if ("boeingApfAirframeEngine".equals(childBlockName)) {     for (com.honeywell.coreptdu.datatypes.boeingairframeengine.entity.BoeingApfAirframeEngine boeingApfAirframeEngine2 : this.boeingApfAirframeEngine.getData()) {         data.append(getExportData(boeingApfAirframeEngine2, columns, depth, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));     } }
  return data.toString()

API: initializeForm()
  log.info("initializeForm Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String fname = getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME);     java.lang.String vErr = null;     defaultValue("J", "global.data_supplier");     defaultValue("99999", "global.dcr_number");     defaultValue(null, "global.processing_cycle");     defaultValue("MAXIMIZE", "global.status_window");     defaultValue(null, "global.allroles");     defaultValue("cpt", "global.user_name");     defaultValue("cpt", "global.password");     defaultValue("cpt", "global.connect_string");     defaultValue("airport", "global.data_type");     defaultValue("airport", "global.table_name");     defaultValue("blank", "global.last_query");     global.setUserName(app.getUserName());     global.setPassword(app.getPassword());     global.setConnectString(app.getURL());     if (java.util.Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE);     } else {         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);     }     vErr = coreptLib.setRole(global.getAllroles());     if (!java.util.Objects.equals(vErr, "PASSED")) {         oneButton("S", "Fatal Error", "The roles cannot be activated.  Contact the COREPT Administrator.");         exitForm();     } else {         if (java.util.Objects.equals(global.getProcessingCycle(), null)) {             try {                 query = """                 select max(processing_cycle)                       from pl_std_airport                 """;                 rec = app.selectInto(query);                 global.setProcessingCycle(rec.getString());             } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {                 global.setProcessingCycle(null);             }         }         global.setUserName(app.getUserName());         global.setPassword(app.getPassword());         global.setConnectString(app.getURL());         setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "60");         displayItemBlock.setProcessingCycle(global.getProcessingCycle());         populateItems(fname);         coreptLib.unsetQueryMenuItems();     }     log.info("initializeForm Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing initializeForm" + e.getMessage());     throw e; }

API: keyCommit(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" keyCommit Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     int vButton = 0;     try {         if (java.util.Arrays.asList("CHANGED", "NEW").contains(system.getFormStatus())) {             if (java.util.Arrays.asList("ENTER_QUERY", "EXECUTE_QUERY", "EXIT").contains(system.getCoordinationOperation())) {                 checkApfDuplicate();                 commitForm(this);                 sendUpdatedRowIdDetails();                 coreptLib.dspMsg("Record has been saved successfully");                 system.setFormStatus("NORMAL");             } else {                 alertDetails.getCurrent();                 if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                     vButton = displayAlert.moreButtons("C", "Save Record", ("Do you wish to Save the Record." + chr(10)) + " ", "Save", "Cancel", "");                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                     alertDetails.createNewRecord("commit");                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                 } else if (alertDetails.getAlerts().size() > alertDetails.getCurrentAlert()) {
				 //Added for CodeReview Testing
                     vButton = displayAlert.moreButtons("C", "Save Record", ("Do you wish to Save the Record." + chr(10)) + " ", "Save", "Cancel", "");
                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);
                     alertDetails.createNewRecord("commit");
                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);
                 }
				 else {                     vButton = alertDetails.getAlertValue("commit", alertDetails.getCurrentAlert());                 }                 if (java.util.Objects.equals(vButton, 1)) {                     checkApfDuplicate();                     commitForm(this);                     sendUpdatedRowIdDetails();                     coreptLib.dspMsg("Record has been saved successfully");                     system.setFormStatus("NORMAL");                 }             }         }     } catch (jakarta.persistence.EntityExistsException | org.hibernate.exception.ConstraintViolationException ex) {         coreptLib.dspMsg("ORACLE error:  unable to INSERT record. \n \n Place check the exact error message form the \"Display \n Error\" in the \"HELP\" menu ");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyCommit executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyCommit Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyCreRec(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" keyCreRec Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyCreRec executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyCreRec Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyDuprec(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" keyDuprec Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         log.info("inside if");     } else {         if (!java.util.Objects.equals(nameIn(this, system.getCursorBlock() + ".airframe"), null)) {             createRecord("");         }         copy(null, system.getCursorBlock() + ".create_dcr_number");         copy(null, system.getCursorBlock() + ".update_dcr_number");     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyDuprec executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto));
	  try {
	  //Added for CodeReview
     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);
     if (java.util.Objects.equals(parameter.getWorkType(), "UPDATE")) {
         log.info("inside if");
     } else {
         if (!java.util.Objects.equals(nameIn(this, system.getCursorBlock() + ".airframe"), null)) {
             createRecord("");
         }
         copy(null, system.getCursorBlock() + ".create_dcr_number");
         copy(null, system.getCursorBlock() + ".update_dcr_number");
     }
     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);
     log.info(" keyDuprec executed successfully");
     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto));
 } catch (java.lang.Exception e) {
     log.error("Error while Executing the keyDuprec Service");
     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);
     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto);
 } } catch (java.lang.Exception e) {     log.error("Error while Executing the keyDuprec Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyEntQry(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" whenNewFormInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     coreptLib.coreptenterquery();     system.setMode("ENTER_QUERY");     if (java.util.Objects.equals(system.getMode(), "NORMAL")) {         coreptLib.unsetQueryMenuItems();     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenNewFormInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenNewFormInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyExit(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" webutilWebutilCApiFunctionsWhenCustomItemEvent Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" webutilWebutilCApiFunctionsWhenCustomItemEvent executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the webutilWebutilCApiFunctionsWhenCustomItemEvent Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: onClearDetails(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" onClearDetails Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     clearAllMasterDetails();     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" onClearDetails executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the onClearDetails Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: populateItems(java.lang.String)
  log.info("populateItems Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String scrDescription = null;     java.lang.String scrPartNumber = null;     java.util.List<java.lang.String> getModuleInformation = coreptLib.getModuleInformation(mname.replaceAll(" ", "_"), scrDescription, scrPartNumber);     scrDescription = getModuleInformation.get(0);     scrPartNumber = getModuleInformation.get(1);     if (java.util.Objects.equals(nameIn(this, "parameter.work_type"), "VIEW")) {         displayItemBlock.setFormDesc(substr(scrDescription, 1, instr(scrDescription, "/") - 1) + substr(scrDescription, instr(scrDescription, "/") + 7));     } else {         displayItemBlock.setFormDesc(scrDescription);     }     displayItemBlock.setFormDateTime(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm:ss")).toUpperCase());     displayItemBlock.setFormName(mname);     displayItemBlock.setFormPartNumber(scrPartNumber);     try {         query = """         SELECT data_supplier_name         		from   data_supplier         		WHERE  data_supplier = nvl(?,'T')         """;         rec = app.selectInto(query, global.getDataSupplier());         displayItemBlock.setFormSource(rec.getString());     } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {         displayItemBlock.setFormSource(global.getDataSupplier());     }     query = """     SELECT DECODE(nvl(?,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||?||', '||     				  DECODE(nvl(?,'VIEW'),'VIEW','Query Only','Data Entry')        from   dual     """;     rec = app.selectInto(query, parameter.getRecordType(), parameter.getLibraryAccess(), parameter.getWorkType());     displayItemBlock.setFormRecordType(rec.getString());     log.info("populateItems Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateItems" + e.getMessage());     throw e; }

API: queryMasterDetails(java.lang.Object,java.lang.String)
  log.info("queryMasterDetails Executing")
  try {     java.lang.String oldmsg = null;     java.lang.String reldef = "FALSE";     java.lang.String where = null;     try {         oldmsg = system.getMessageLevel();         if (java.util.Objects.equals(reldef, "FALSE")) {             system.setMessageLevel("10");             where = ((("BOEING_APF_AIRFRAME_ENGINE.AIRFRAME = '" + boeingAirframeEngine.getData().get(system.getCursorRecordIndex()).getAirframe()) + "' AND BOEING_APF_AIRFRAME_ENGINE.ENGINE_IDENT = '") + boeingAirframeEngine.getData().get(system.getCursorRecordIndex()).getEngineIdent()) + "'";             boeingApfAirframeEngine.getData().clear();             executeQuery(this, "boeingApfAirframeEngine", where, null, null);             system.setMessageLevel(oldmsg);         } else {             setBlockProperty(detail, "COORDINATION_STATUS", "NON_COORDINATED");         }     } catch (java.lang.Exception e) {         system.setMessageLevel(oldmsg);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     log.info("queryMasterDetails Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing queryMasterDetails" + e.getMessage());     throw e; }

API: toolsDuplicate(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: toolsExportDestination(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     coreptMenuMmbServiceImpl.toolsExportFormData(this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: updateAppInstance()
  super.app = this.app
  super.baseInstance = this
  super.global = this.global
  super.parameter = this.parameter
  super.system = this.system
  super.groups = this.groups
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.displayAlert = this.displayAlert
  super.windows = this.windows
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptLib)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, displayAlert)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, refreshMasterLibrary)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, scTemplate)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl)
  coreptLib.initialization(this)
  scTemplate.initialization(this)
  coreptMenuMmbServiceImpl.initialization(this)

API: whenNewFormInstance(com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.request.BoeingAirframeEngineTriggerRequestDto)
  log.info(" whenNewFormInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.boeingairframeengine.dto.response.BoeingAirframeEngineTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     initializeForm();     coreptLib.setBlock();     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenNewFormInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenNewFormInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

